"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[39],{8859:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var i=t(4848),s=t(8453);const r={sidebar_position:5},a="Manual integration with the Identity Service",o={id:"integrating-with-identity-service",title:"Manual integration with the Identity Service",description:"This is internal documentation. This document can be used only if it was recommended by the Support Team.",source:"@site/docs/integrating-with-identity-service.md",sourceDirName:".",slug:"/integrating-with-identity-service",permalink:"/xl-release-kubernetes-helm-chart/docs/integrating-with-identity-service",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Assigning Pods to Nodes",permalink:"/xl-release-kubernetes-helm-chart/docs/assigning_pods_to_nodes"},next:{title:"Release Installation on a Air-gapped K8S Cluster",permalink:"/xl-release-kubernetes-helm-chart/docs/air-gapped-installation"}},l={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"1. Adding the Release client",id:"1-adding-the-release-client",level:2},{value:"2. Configuring Release",id:"2-configuring-release",level:2},{value:"3. Deploy Release",id:"3-deploy-release",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"manual-integration-with-the-identity-service",children:"Manual integration with the Identity Service"}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsx)(n.p,{children:"This is internal documentation. This document can be used only if it was recommended by the Support Team."})}),"\n",(0,i.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["There is an account in the platform to connect to the Release instance (",(0,i.jsx)(n.a,{href:"https://demoaccount.staging.digital.ai",children:"https://demoaccount.staging.digital.ai"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"There is an admin user (role account-admin) in the account that can be used to configure the Release client (contact Kraken team)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"1-adding-the-release-client",children:"1. Adding the Release client"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Log into the Identity Service account you want to connect to Release using an admin user for that account"}),"\n",(0,i.jsx)(n.li,{children:"Go to Admin > Clients > Add OIDC Client"}),"\n",(0,i.jsx)(n.li,{children:"Give the client a name (e.g. release)"}),"\n",(0,i.jsx)(n.li,{children:"Scroll down to \u201cValid Redirect URIs\u201d and add"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"<release url>/oidc-login\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"5",children:["\n",(0,i.jsx)(n.li,{children:"Save the client"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"2-configuring-release",children:"2. Configuring Release"}),"\n",(0,i.jsx)(n.p,{children:"In CR file disable Keycloak and update OIDC properties:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'  oidc:\n    enabled: true\n    clientId: "<client_id>"\n    clientSecret: "<client secret>"\n    external: true\n    issuer: "https://identity.staging.digital.ai/auth/realms/demoaccount"\n    postLogoutRedirectUri: "<release url>/oidc-login"\n    redirectUri: "<release url>/oidc-login"\n    userNameClaim: preferred_username\n    rolesClaim: "realm_access.roles"\n    scopes: ["openid"]\n'})}),"\n",(0,i.jsx)(n.p,{children:"To find the client id and secret, edit the Release client created above, scroll down to the Credentials section, and copy the values from there."}),"\n",(0,i.jsx)(n.p,{children:"issuer can be found in the Identity Service Client section, in the OIDC config that can be downloaded from there."}),"\n",(0,i.jsxs)(n.p,{children:["To check rolesClaim value, decode the ID token.\n",(0,i.jsx)(n.a,{href:"https://docs.xebialabs.com/v.22.2/deploy/concept/deploy-oidc-with-keycloak/#test-public-rest-apis",children:"Here"})," you can find how to fetch token.\nUse ",(0,i.jsx)(n.a,{href:"https://jwt.io/",children:"jwt"})," to decode ID token. Get the roles path from decoded value - this is rolesClaim."]}),"\n",(0,i.jsx)(n.h2,{id:"3-deploy-release",children:"3. Deploy Release"}),"\n",(0,i.jsx)(n.p,{children:"Deploy Release and navigate to the Release site in the browser. Log in to the XLR with user from the Identity Service."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(6540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);