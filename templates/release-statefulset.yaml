apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "release.name" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.statefulsetLabels }}
    {{- include "common.tplvalues.render" (dict "value" .Values.statefulsetLabels "context" $) | nindent 4 }}
    {{- end }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if or .Values.commonAnnotations .Values.statefulsetAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
    {{- if .Values.statefulsetAnnotations }}
    {{- include "common.tplvalues.render" (dict "value" .Values.statefulsetAnnotations "context" $) | nindent 4 }}
    {{- end }}
  {{- end }}
spec:
  serviceName: {{ printf "%s-headless" (include "common.names.fullname" .) }}
  podManagementPolicy: {{ .Values.podManagementPolicy }}
  replicas: {{ .Values.replicaCount }}
  {{- if .Values.updateStrategy }}
  updateStrategy: {{- toYaml .Values.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
  template:
    metadata:
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        {{- if .Values.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.podLabels "context" $) | nindent 8 }}
        {{- end }}
      annotations:
        {{- if .Values.commonAnnotations }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 8 }}
        {{- end }}
        checksum/config: {{ include (print $.Template.BasePath "/configuration.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
        {{- if .Values.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.schedulerName }}
      schedulerName: {{ .Values.schedulerName | quote }}
      {{- end }}
      serviceAccountName: {{ template "release.serviceAccountName" . }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" .) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAffinityPreset "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAntiAffinityPreset "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.nodeAffinityPreset.type "key" .Values.nodeAffinityPreset.key "values" .Values.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.dnsPolicy }}
      dnsPolicy: {{ .Values.dnsPolicy }}
      {{- end }}
      {{- if .Values.hostNetwork }}
      hostNetwork: {{ .Values.hostNetwork }}
      {{- end }}
      {{- if .Values.dnsConfig }}
      dnsConfig: {{- include "common.tplvalues.render" (dict "value" .Values.dnsConfig "context" .) | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- include "release.imagePullSecrets" . | nindent 6 }}
      {{- if or .Values.initContainers (and (not .Values.external.db.enabled) .Values.postgresql.install) (and (not .Values.external.mq.enabled) .Values.rabbitmq.install) }}
      initContainers:
        {{- if not .Values.diagnosticMode.enabled }}
        {{- if and (not .Values.external.db.enabled) .Values.postgresql.install }}
        - name: wait-for-postgresql
          image: {{ include "common.images.image" (dict "imageRoot" .Values.busyBox.image "global" .Values.global "context" .) }}
          imagePullPolicy: {{ .Values.busyBox.image.pullPolicy | quote }}
          command:
            - /bin/sh
          args:
            - -ec
            - |
              until nc -z -w 2 -v $POSTGRESQL_SVC $POSTGRESQL_PORT && echo postgresql ok; do
                sleep 2;
              done;
          env:
            - name: POSTGRESQL_SVC
              value: {{ include "postgresql.subchart" . }}
            - name: POSTGRESQL_PORT
              value: {{ (include "release.postgresql.service.port" .) | quote }}
        {{- end }}
        {{- if and (not .Values.external.mq.enabled) .Values.rabbitmq.install }}
        - name: wait-for-rabbitmq
          image: {{ include "common.images.image" (dict "imageRoot" .Values.busyBox.image "global" .Values.global "context" .) }}
          imagePullPolicy: {{ .Values.busyBox.image.pullPolicy | quote }}
          command:
            - /bin/sh
          args:
            - -ec
            - |
              until nc -z -w 2 -v $RABBITMQ_SVC $RABBITMQ_PORT && echo database ok; do
                sleep 2;
              done;
          env:
            - name: RABBITMQ_SVC
              value: {{ include "rabbitmq.subchart" . }}
            - name: RABBITMQ_PORT
              value: {{ .Values.rabbitmq.service.ports.amqp | quote }}
        {{- end }}
        {{- end }}
        {{- if and .Values.volumePermissions.enabled .Values.persistence.enabled }}
        - name: volume-permissions
          image: {{ include "common.images.image" (dict "imageRoot" .Values.volumePermissions.image "global" .Values.global "context" .) }}
          imagePullPolicy: {{ .Values.volumePermissions.image.pullPolicy | quote }}
          command:
            - /bin/bash
          args:
            - -ec
            - |
              {{- include "common.tplvalues.render" (dict "value" .Values.volumePermissions.script "context" $) | nindent 14 }}
          securityContext: {{- .Values.volumePermissions.containerSecurityContext | toYaml | nindent 12 }}
          {{- if .Values.volumePermissions.resources }}
          resources: {{- toYaml .Values.volumePermissions.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
          {{- range $path := .Values.persistence.paths }}
            - name: data
              mountPath: {{ $path }}
              subPath: {{ regexFind "[^/]+$" $path }}
          {{- end }}
        {{- end }}
        {{- if .Values.initContainers }}
        {{- include "common.tplvalues.render" (dict "value" .Values.initContainers "context" $) | nindent 8 }}
        {{- end }}
      {{- end }}
      containers:
        - name: release
          image: {{ include "common.images.image" (dict "imageRoot" .Values.image "global" .Values.global "context" .) }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          {{- else if .Values.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- else if .Values.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.args "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ACCEPT_EULA
              {{- if .Values.licenseAcceptEula }}
              value: "y"
              {{- else }}
              value: "n"
              {{- end }}
            {{- if .Values.ssl.enabled }}
            - name: APP_PORT
              value: {{ .Values.containerPorts.releaseHttps | quote }}
            {{- else }}
            - name: APP_PORT
              value: {{ .Values.containerPorts.releaseHttp | quote }}
            {{- end }}
            - name: ADMIN_PASSWORD
              {{- include "render.value-secret" (dict  "value" (include "release.secretPassword" .) "source" .Values.auth.adminPassword "sourceEnabled" true "defaultName" (include "common.names.fullname" .) "defaultKey" "releasePassword" "default" true "context" $ ) | nindent 14 }}
            - name: XL_CLUSTER_MODE
              value: {{ .Values.clusterMode }}
            - name: FORCE_UPGRADE
              value: {{ .Values.forceUpgrade | quote }}
            - name: ENABLE_EMBEDDED_QUEUE
              value: {{ .Values.enableEmbeddedQueue | quote }}
            - name: LOGBACK_GLOBAL_LOGGING_LEVEL
              value: {{ .Values.logback.globalLoggingLevel | quote }}
            - name: LOGBACK_SCAN_ENABLED
              value: {{ .Values.logback.scanEnabled | quote }}
            - name: LOGBACK_SCAN_PERIOD
              value: {{ .Values.logback.scanPeriod | quote }}
            - name: SERVER_URL
              value: {{ include "release.serverUrl" . }}
             {{- if or .Values.external.db.enabled .Values.postgresql.install }}
            - name: XL_DB_URL
              value: {{ include "release.mainDbUrl" . }}
            - name: XL_DB_USERNAME
              {{- include "render.value-secret" (dict  "value" (include "release.mainUsername" .) "source" .Values.external.db.main.username "sourceEnabled" .Values.external.db.enabled "defaultName" (include "common.names.fullname" .) "defaultKey" "mainDatabaseUsername" "context" $ ) | nindent 14 }}
            - name: XL_DB_PASSWORD
              {{- include "render.value-secret" (dict  "value" (include "release.mainPassword" .) "source" .Values.external.db.main.password "sourceEnabled" .Values.external.db.enabled "defaultName" (include "common.names.fullname" .) "defaultKey" "mainDatabasePassword" "context" $ ) | nindent 14 }}
            - name: XL_DB_MAX_POOL_SIZE
              value: {{ default 10 .Values.external.db.main.maxPoolSize | quote }}
            - name: XL_REPORT_DB_URL
              value: {{ include "release.reportDbUrl" . }}
            - name: XL_REPORT_DB_USERNAME
              {{- include "render.value-secret" (dict  "value" (include "release.reportUsername" .) "source" .Values.external.db.report.username "sourceEnabled" .Values.external.db.enabled "defaultName" (include "common.names.fullname" .) "defaultKey" "reportDatabaseUsername" "context" $ ) | nindent 14 }}
            - name: XL_REPORT_DB_PASSWORD
              {{- include "render.value-secret" (dict  "value" (include "release.reportPassword" .) "source" .Values.external.db.report.password "sourceEnabled" .Values.external.db.enabled "defaultName" (include "common.names.fullname" .) "defaultKey" "reportDatabasePassword" "context" $ ) | nindent 14 }}
            - name: XL_REPORT_DB_MAX_POOL_SIZE
              value: {{ default 10 .Values.external.db.report.maxPoolSize | quote }}
             {{- end }}
            {{- if .Values.license }}
            - name: XL_LICENSE
              {{- include "render.value-secret" (dict  "value" (.Values.license) "defaultName" (include "common.names.fullname" .) "defaultKey" "releaseLicense" "context" $ ) | nindent 14 }}
            {{- else }}
            {{- if and .Values.hooks.getLicense.enabled .Values.licenseAcceptEula }}
            - name: XL_LICENSE
              valueFrom:
                secretKeyRef:
                  name: "{{ include "common.tplvalues.render" ( dict "value" .Values.hooks.getLicense.name "context" $ ) }}"
                  key: xl-release-license.lic
            {{- end }}
            {{- end }}
            - name: XL_METRICS_ENABLED
              value: {{ .Values.metrics.enabled | quote }}
            - name: GENERATE_XL_CONFIG
              value: {{ .Values.generateXlConfig | quote }}
            - name: USE_IP_AS_HOSTNAME
              value: {{ .Values.useIpAsHostname | quote }}
            - name: FORCE_REMOVE_MISSING_TYPES
              value: {{ .Values.forceRemoveMissingTypes | quote }}
             {{- if or .Values.rabbitmq.install .Values.external.mq.enabled }}
            - name: XLR_TASK_QUEUE_URL
              value: {{ include "release.mqUrl" . }}
            - name: XLR_TASK_QUEUE_NAME
              value: {{ include "release.mqQueueName" . }}
            - name: XLR_TASK_QUEUE_USERNAME
              {{- include "render.value-secret" (dict  "value" (include "release.mqUsername" .) "source" .Values.external.mq.username "sourceEnabled" .Values.external.mq.enabled "defaultName" (include "common.names.fullname" .) "defaultKey" "rabbitmqUsername" "context" $ ) | nindent 14 }}
            - name: XLR_TASK_QUEUE_PASSWORD
              {{- include "render.value-secret" (dict  "value" (include "release.mqPassword" .) "source" .Values.external.mq.password "sourceEnabled" .Values.external.mq.enabled "defaultName" (include "common.names.fullname" .) "defaultKey" "rabbitmqPassword" "context" $ ) | nindent 14 }}
            - name: XLR_TASK_QUEUE_TYPE
              value: {{ include "release.mqQueueType" . }}
            - name: XLR_TASK_QUEUE_CONNECTOR_TYPE
              value: {{ include "release.mqQueueConnector" . }}
             {{- end }}
            {{- if .Values.keystore.keystore }}
            - name: REPOSITORY_KEYSTORE
              {{- include "render.value-secret" (dict  "value" (.Values.keystore.keystore) "defaultName" (include "common.names.fullname" .) "defaultKey" "repositoryKeystore" "context" $ ) | nindent 14 }}
            {{- end }}
            {{- if .Values.keystore.passphrase }}
            - name: REPOSITORY_KEYSTORE_PASSPHRASE
              {{- include "render.value-secret" (dict  "value" (.Values.keystore.passphrase) "defaultName" (include "common.names.fullname" .) "defaultKey" "repositoryKeystorePassphrase" "context" $ ) | nindent 14 }}
            {{- end }}
            {{- if .Values.truststore.truststore }}
            - name: TRUSTSTORE
              value: "/opt/xebialabs/xl-release-server/certs/{{ include "secrets.key" (dict "secretRef" .Values.truststore.truststore "default" "truststore" "context" $) }}"
            - name: TRUSTSTORE_TYPE
              value: {{ .Values.truststore.type | quote }}
            {{- if .Values.truststore.password }}
            - name: TRUSTSTORE_PASSWORD
              {{- include "render.value-secret" (dict  "value" (.Values.truststore.password) "defaultName" (include "common.names.fullname" .) "defaultKey" "truststorePassword" "context" $ ) | nindent 14 }}
            {{- end }}
            {{- end }}
            {{- if .Values.oidc.enabled }}
            - name: OIDC_CLIENT_ID
              {{- include "render.value-secret" (dict  "value" .Values.oidc.clientId "defaultName" (include "common.names.fullname" .) "defaultKey" "oidcClientId" "context" $ ) | nindent 14 }}
            - name: OIDC_CLIENT_SECRET
              {{- include "render.value-secret" (dict  "value" .Values.oidc.clientSecret "defaultName" (include "common.names.fullname" .) "defaultKey" "oidcClientSecret" "context" $ ) | nindent 14 }}
            {{- if .Values.oidc.clientAuthJwt.enable -}}
            {{- if .Values.oidc.clientAuthJwt.keyStore.password -}}
            - name: OIDC_CLIENT_AUTH_JWT_KEYSTORE_PASSWORD
              {{- include "render.value-secret" (dict "value" .Values.oidc.clientAuthJwt.keyStore.password "defaultName" (include "common.names.fullname" .) "defaultKey" "oidcClientAuthJwtKeyStorePassword" "context" $ ) | nindent 14 }}
            {{- end -}}
            {{- if .Values.oidc.clientAuthJwt.key.password -}}
            - name: OIDC_CLIENT_AUTH_JWT_KEY_PASSWORD
              {{- include "render.value-secret" (dict "value" .Values.oidc.clientAuthJwt.key.password "defaultName" (include "common.names.fullname" .) "defaultKey" "oidcClientAuthJwtKeyPassword" "context" $ ) | nindent 14 }}
            {{- end -}}
            {{- end -}}
            {{- if and .Values.oidc.accessToken.enable .Values.oidc.accessToken.secretKey -}}
            - name: OIDC_ACCESS_TOKEN_SECRET_KEY
              {{- include "render.value-secret" (dict "value" .Values.oidc.accessToken.secretKey "defaultName" (include "common.names.fullname" .) "defaultKey" "oidcAccessTokenSecretKey" "context" $ ) | nindent 14 }}
            {{- end -}}
            {{- end }}
            - name: XLR_HTTP2_ENABLED
              value: {{ (eq .Values.appProtocol "http2") | quote }}
            {{- if .Values.ssl.enabled }}
            - name: SSL
              value: {{ .Values.ssl.enabled | quote }}
            - name: HTTP_SSL_KEYSTORE_PATH
              value: /opt/xebialabs/xl-release-server/certs/{{ include "secrets.key" (dict "secretRef" .Values.ssl.keystore "default" (printf "ssl_keystore.%s" .Values.ssl.keystoreType) "context" $) }}
            - name: HTTP_SSL_KEYSTORE_PASSWORD
              {{- include "render.value-secret" (dict  "value" .Values.ssl.keystorePassword "defaultName" (include "common.names.fullname" .) "defaultKey" "sslKeystorePassword" "context" $ ) | nindent 14 }}
            - name: HTTP_SSL_KEYSTORE_KEYPASSWORD
              {{- include "render.value-secret" (dict  "value" .Values.ssl.keystoreKeypassword "defaultName" (include "common.names.fullname" .) "defaultKey" "sslKeystoreKeypassword" "context" $ ) | nindent 14 }}
            - name: HTTP_SSL_KEYSTORE_TYPE
              value: {{ .Values.ssl.keystoreType }}
            {{- end }}
            - name: APP_CONTEXT_ROOT
              value: {{ .Values.appContextRoot }}
            - name: XL_RELEASE_SERVER_OPTS
              value: "{{- include "common.tplvalues.render" (dict "value" .Values.jvmArgs "context" $) }}{{ include "common.tplvalues.render" (dict "value" .Values.truststore.params "context" $) }}{{ include "common.tplvalues.render" (dict "value" .Values.debugMode.remoteJvmParams "context" $) }}"
            {{- if .Values.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.extraEnvVarsSecret "context" $) }}
            {{- end }}
          ports:
            {{- if .Values.ssl.enabled }}
            - name: {{ .Values.service.portNames.releaseHttps }}
              containerPort: {{ .Values.containerPorts.releaseHttps }}
            {{- else }}
            - name: {{ .Values.service.portNames.releaseHttp }}
              containerPort: {{ .Values.containerPorts.releaseHttp }}
            {{- end }}
            {{- if .Values.extraContainerPorts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraContainerPorts "context" $) | nindent 12 }}
            {{- end }}
          {{- if not .Values.diagnosticMode.enabled }}
          {{- if .Values.health.enabled }}
          livenessProbe:
            {{- if .Values.ssl.enabled }}
            tcpSocket:
              port: {{ .Values.service.portNames.releaseHttps }}
            {{- else }}
            httpGet:
              scheme: HTTP
              path: {{ .Values.appContextRoot }}
              port: {{ .Values.service.portNames.releaseHttp }}
            {{- end }}
            initialDelaySeconds: {{ .Values.health.probesLivenessTimeout }}
            periodSeconds: {{ .Values.health.periodScans }}
            failureThreshold: {{ .Values.health.probeFailureThreshold }}
          readinessProbe:
            {{- if .Values.ssl.enabled }}
            tcpSocket:
              port: {{ .Values.service.portNames.releaseHttps }}
            {{- else }}
            httpGet:
              scheme: HTTP
              path: {{ .Values.appContextRoot }}
              port: {{ .Values.service.portNames.releaseHttp }}
            {{- end }}
            initialDelaySeconds: {{ .Values.health.probesReadinessTimeout }}
            periodSeconds: {{ .Values.health.periodScans }}
            failureThreshold: {{ .Values.health.probeFailureThreshold }}
          {{- end }}
          {{- end }}
          {{- if .Values.resources }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            {{- range $k, $v := .Values.configuration }}
            - name: configuration
              mountPath: /opt/xebialabs/xl-release-server/{{ $v.path }}
              subPath: {{ $v.path }}
            {{- end }}
            {{- range $k, $v := .Values.extraConfiguration }}
            - name: configuration-extra
              mountPath: /opt/xebialabs/xl-release-server/{{ $v.path }}
              subPath: {{ $v.path }}
            {{- end }}
            {{- if .Values.truststore.truststore }}
            - mountPath: /opt/xebialabs/xl-release-server/certs/{{ include "secrets.key" (dict "secretRef" .Values.truststore.truststore "default" "truststore" "context" $) }}
              name: release-truststore
              subPath: {{ include "secrets.key" (dict "secretRef" .Values.truststore.truststore "default" "truststore" "context" $) }}
              readOnly: true
            {{- end }}
            {{- range $path := .Values.persistence.paths }}
            - name: data
              mountPath: {{ $path }}
              subPath: {{ regexFind "[^/]+$" $path }}
            {{- end }}
            {{- if .Values.ssl.enabled }}
            - name: http-ssl-keystore
              mountPath: /opt/xebialabs/xl-release-server/certs/{{ include "secrets.key" (dict "secretRef" .Values.ssl.keystore "default" (printf "ssl_keystore.%s" .Values.ssl.keystoreType) "context" $) }}
              subPath: {{ include "secrets.key" (dict "secretRef" .Values.ssl.keystore "default" (printf "ssl_keystore.%s" .Values.ssl.keystoreType) "context" $) }}
              readOnly: true
            {{- end }}
            {{- if .Values.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" $) | nindent 12 }}
            {{- end }}
        {{- if .Values.sidecars }}
        {{- include "common.tplvalues.render" (dict "value" .Values.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        {{- if .Values.configuration }}
        - name: configuration
          configMap:
            name: {{ printf "%s-config" (include "common.names.fullname" .) }}
            items:
              {{- range $k, $v := .Values.configuration }}
              - key: {{ $k }}
                path: {{ $v.path }}
                {{- if $v.mode}}
                mode: {{ $v.mode }}
                {{- end }}
              {{- end }}
        {{- end }}
        {{- if .Values.extraConfiguration }}
        - name: configuration-extra
          configMap:
            name: {{ printf "%s-config" (include "common.names.fullname" .) }}-extra
            items:
              {{- range $k, $v := .Values.extraConfiguration }}
              - key: {{ $k }}
                path: {{ $v.path }}
                {{- if $v.mode}}
                mode: {{ $v.mode }}
                {{- end }}
              {{- end }}
        {{- end }}
        {{- if .Values.truststore.truststore }}
        - name: release-truststore
          secret:
            secretName: {{ include "render.secret-name" (dict "value" .Values.truststore.truststore "defaultName" (include "common.names.fullname" .) "context" $ ) }}
        {{- end }}
        {{- if .Values.ssl.enabled }}
        - name: http-ssl-keystore
          secret:
            secretName: {{ include "render.secret-name" (dict "value" .Values.ssl.keystore "defaultName" (include "common.names.fullname" .) "context" $ ) }}
        {{- end }}
        {{- if .Values.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumes "context" $)  | nindent 8 }}
        {{- end }}
        {{- if not .Values.persistence.enabled }}
        - name: data
          emptyDir: {}
        {{- else if .Values.persistence.existingClaim }}
        - name: data
          persistentVolumeClaim:
            {{- with .Values.persistence.existingClaim }}
            claimName: {{ tpl . $ }}
            {{- end }}
        {{- else if .Values.persistence.single }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "release.name" . }}
        {{- else }}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels: {{- include "common.labels.matchLabels" . | nindent 10 }}
        {{- if .Values.persistence.annotations }}
        annotations:
          {{- include "common.tplvalues.render" ( dict "value" .Values.persistence.annotations "context" $) | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
          {{- range .Values.persistence.accessModes }}
            - {{ . | quote }}
          {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
        {{ include "common.storage.class" (dict "persistence" .Values.persistence "global" .Values.global) }}
        {{- if .Values.persistence.selector }}
        selector: {{- include "common.tplvalues.render" (dict "value" .Values.persistence.selector "context" $) | nindent 10 }}
        {{- end -}}
  {{- end }}
