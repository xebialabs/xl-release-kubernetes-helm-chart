apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.statefulsetLabels }}
    {{- include "common.tplvalues.render" (dict "value" .Values.statefulsetLabels "context" $) | nindent 4 }}
    {{- end }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  serviceName: {{ printf "%s-headless" (include "common.names.fullname" .) }}
  podManagementPolicy: {{ .Values.podManagementPolicy }}
  replicas: {{ .Values.replicaCount }}
  {{- if .Values.updateStrategy }}
  updateStrategy: {{- toYaml .Values.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
  template:
    metadata:
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        {{- if .Values.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.podLabels "context" $) | nindent 8 }}
        {{- end }}
      annotations:
        {{- if .Values.commonAnnotations }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 8 }}
        {{- end }}
        checksum/config: {{ include (print $.Template.BasePath "/configuration.yaml") . | sha256sum }}
        {{- if or (not .Values.auth.adminPassword) .Values.extraSecrets }}
        checksum/secret: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
        {{- end }}
        {{- if .Values.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.schedulerName }}
      schedulerName: {{ .Values.schedulerName | quote }}
      {{- end }}
      serviceAccountName: {{ template "release.serviceAccountName" . }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" .) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAffinityPreset "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAntiAffinityPreset "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.nodeAffinityPreset.type "key" .Values.nodeAffinityPreset.key "values" .Values.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.dnsPolicy }}
      dnsPolicy: {{ .Values.dnsPolicy }}
      {{- end }}
      {{- if .Values.dnsConfig }}
      dnsConfig: {{- include "common.tplvalues.render" (dict "value" .Values.dnsConfig "context" .) | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- if or .Values.initContainers (and (not .Values.external.db.enabled) .Values.postgresql.install) (and (not .Values.external.mq.enabled) .Values.rabbitmq.install) }}
      initContainers:
        {{- if and (not .Values.external.db.enabled) .Values.postgresql.install }}
        - name: wait-for-postgresql
          image: {{ include "release.busyBox.image" . }}
          imagePullPolicy: {{ .Values.busyBox.image.pullPolicy | quote }}
          command:
            - /bin/sh
          args:
            - -ec
            - |
              until nc -z -w 2 $POSTGRESQL_SVC $POSTGRESQL_PORT && echo postgresql ok; do
                sleep 2;
              done;
          env:
            - name: POSTGRESQL_SVC
              value: {{ .Release.Name }}-postgresql
            - name: POSTGRESQL_PORT
              value: {{ .Values.postgresql.service.port | quote }}
        {{- end }}
        {{- if and (not .Values.external.mq.enabled) .Values.rabbitmq.install }}
        - name: wait-for-rabbitmq
          image: {{ include "release.busyBox.image" . }}
          imagePullPolicy: {{ .Values.busyBox.image.pullPolicy | quote }}
          command:
            - /bin/sh
          args:
            - -ec
            - |
              until nc -z -w 2 $RABBITMQ_SVC $RABBITMQ_PORT && echo database ok; do
                sleep 2;
              done;
          env:
            - name: RABBITMQ_SVC
              value: {{ .Release.Name }}-rabbitmq
            - name: RABBITMQ_PORT
              value: {{ .Values.rabbitmq.service.ports.amqp | quote }}
        {{- end }}
        {{- if .Values.initContainers }}
        {{- include "common.tplvalues.render" (dict "value" .Values.initContainers "context" $) | nindent 8 }}
        {{- end }}
      {{- end }}
      containers:
        - name: release
          image: {{ template "release.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          {{- else if .Values.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- else if .Values.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.args "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          env:
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "common.names.fullname" . }}
                  key: releasePassword
            - name: XL_CLUSTER_MODE
              value: full
            - name: FORCE_UPGRADE
              value: "true"
            - name: ENABLE_EMBEDDED_QUEUE
              value: "false"
            - name: SERVER_URL
              value: {{ include "release.serverUrl" . }}
             {{- if or .Values.external.db.enabled .Values.postgresql.install }}
            - name: XL_DB_URL
              value: {{ include "release.mainDbUrl" . }}
            - name: XL_DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "common.names.fullname" . }}
                  key: mainDatabaseUsername
            - name: XL_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "common.names.fullname" . }}
                  key: mainDatabasePassword
            - name: XL_REPORT_DB_URL
              value: {{ include "release.reportDbUrl" . }}
            - name: XL_REPORT_DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "common.names.fullname" . }}
                  key: reportDatabaseUsername
            - name: XL_REPORT_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "common.names.fullname" . }}
                  key: reportDatabasePassword
             {{- end }}
            {{- if .Values.license }}
            - name: XL_LICENSE
              valueFrom:
                secretKeyRef:
                  name: {{ include "common.names.fullname" . }}
                  key: releaseLicense
            {{- end }}
            - name: XL_METRICS_ENABLED
              value: "{{ .Values.metrics.enabled}}"
            - name: GENERATE_XL_CONFIG
              value: "{{ .Values.generateXlConfig}}"
            - name: USE_IP_AS_HOSTNAME
              value: "{{ .Values.useIpAsHostname}}"
            - name: FORCE_REMOVE_MISSING_TYPES
              value: "{{ .Values.forceRemoveMissingTypes}}"
             {{- if or .Values.rabbitmq.install .Values.external.mq.enabled }}
            - name: XLR_TASK_QUEUE_URL
              value: {{ include "release.mqUrl" . }}
            - name: XLR_TASK_QUEUE_NAME
              value: {{ include "release.mqQueueName" . }}
            - name: XLR_TASK_QUEUE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "common.names.fullname" . }}
                  key: rabbitmqUsername
            - name: XLR_TASK_QUEUE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "common.names.fullname" . }}
                  key: rabbitmqPassword
             {{- end }}
            {{- if .Values.keystore.keystore }}
            - name: REPOSITORY_KEYSTORE
              valueFrom:
                secretKeyRef:
                  name: {{ include "common.names.fullname" . }}
                  key: repositoryKeystore
            {{- end }}
            {{- if .Values.keystore.passphrase }}
            - name: REPOSITORY_KEYSTORE_PASSPHRASE
              valueFrom:
                secretKeyRef:
                  name: {{ include "common.names.fullname" . }}
                  key: keystorePassphrase
            {{- end }}
            {{- if .Values.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.extraEnvVarsSecret "context" $) }}
            {{- end }}
          ports:
            - name: {{ .Values.service.portNames.releaseHttp }}
              containerPort: {{ .Values.containerPorts.releaseHttp }}
            {{- if .Values.extraContainerPorts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraContainerPorts "context" $) | nindent 12 }}
            {{- end }}
          {{- if not .Values.diagnosticMode.enabled }}
          {{- if .Values.health.enabled }}
          livenessProbe:
            httpGet:
              path: /
              port: {{ .Values.service.portNames.releaseHttp }}
            initialDelaySeconds: {{ .Values.health.probesLivenessTimeout }}
            periodSeconds: {{ .Values.health.periodScans }}
            failureThreshold: {{ .Values.health.probeFailureThreshold }}
          readinessProbe:
            httpGet:
              path: /
              port: {{ .Values.service.portNames.releaseHttp }}
            initialDelaySeconds: {{ .Values.health.probesReadinessTimeout }}
            periodSeconds: {{ .Values.health.periodScans }}
            failureThreshold: {{ .Values.health.probeFailureThreshold }}
          {{- end }}
          {{- end }}
          {{- if .Values.resources }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: configuration
              mountPath: /opt/xebialabs/xl-release-server/default-conf/xl-release.conf.template
              subPath: xl-release.conf.template
            - name: plugin-management-cli
              mountPath: /opt/xebialabs/xl-release-server/bin/plugin-manager-cli-in-container.sh
              subPath: plugin-manager-cli-in-container.sh
            - name: data
              mountPath: /opt/xebialabs/xl-release-server/conf
              subPath: conf
            - name: data
              mountPath: /opt/xebialabs/xl-release-server/ext
              subPath: ext
            - name: data
              mountPath: /opt/xebialabs/xl-release-server/hotfix
              subPath: hotfix
            - name: data
              mountPath: /opt/xebialabs/xl-release-server/hotfix/lib
              subPath: lib
            - name: data
              mountPath: /opt/xebialabs/xl-release-server/reports
              subPath: reports
            {{- if .Values.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" $) | nindent 12 }}
            {{- end }}
        {{- if .Values.sidecars }}
        {{- include "common.tplvalues.render" (dict "value" .Values.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        - name: configuration
          configMap:
            name: {{ printf "%s-config" (include "common.names.fullname" .) }}
            items:
              - key: xl-release.conf.template
                path: xl-release.conf.template
        - name: plugin-management-cli
          configMap:
            name: {{ printf "%s-config" (include "common.names.fullname" .) }}
            items:
              - key: plugin-manager-cli-in-container.sh
                path: plugin-manager-cli-in-container.sh
            defaultMode: 0775
        {{- if .Values.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumes "context" $)  | nindent 8 }}
        {{- end }}
        {{- if not .Values.persistence.enabled }}
        - name: data
          emptyDir: {}
        {{- else if .Values.persistence.existingClaim }}
        - name: data
          persistentVolumeClaim:
            {{- with .Values.persistence.existingClaim }}
            claimName: {{ tpl . $ }}
            {{- end }}
        {{- else if .Values.persistence.single }}
        - name: data
          persistentVolumeClaim:
            claimName: data-{{ include "common.names.fullname" . }}
        {{- else }}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels: {{- include "common.labels.matchLabels" . | nindent 10 }}
        {{- if .Values.persistence.annotations }}
        annotations:
          {{- include "common.tplvalues.render" ( dict "value" .Values.persistence.annotations "context" $) | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
          {{- range .Values.persistence.accessModes }}
            - {{ . | quote }}
          {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
        {{ include "common.storage.class" (dict "persistence" .Values.persistence "global" .Values.global) }}
        {{- if .Values.persistence.selector }}
        selector: {{- include "common.tplvalues.render" (dict "value" .Values.persistence.selector "context" $) | nindent 10 }}
        {{- end -}}
  {{- end }}
