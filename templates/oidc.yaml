{{- if .Values.oidc.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: xl-release-conf
  labels:
    app: {{ template "xl-release.name" . }}
    chart: {{ template "xl-release.chart" . }}
    release: {{ .Release.Name }}
data:
  op-xl-release.conf.template: |
    xl {
    cluster {
        # mode: "default", "hot-standby", "full"
        mode = ${XL_CLUSTER_MODE}
        name = "xl-release_cluster"
        akka {
        loglevel = "INFO"
        actor.debug.receive = off
        remote {
            log-received-messages = off
            log-sent-messages = off
        }
        }
    }

    server {
        http2 {
            enabled = ${XLR_HTTP2_ENABLED}
        }
    }

    license {
        kind = ${XL_LICENSE_KIND}
        product = "xl-release"
    }

    database {
        db-driver-classname="${XL_DB_DRIVER}"
        db-password="${XL_DB_PASSWORD}"
        db-url="${XL_DB_URL}"
        db-username=${XL_DB_USERNAME}
        max-pool-size=10
    }

    # TODO XLR does not support (H2) running in one schema.
    reporting {
        db-driver-classname="${XL_DB_DRIVER}"
        db-password="${XL_REPORT_DB_PASSWORD}"
        db-url="${XL_REPORT_DB_URL}"
        db-username=${XL_REPORT_DB_USERNAME}
    }

    # Task queue
    queue {
        embedded=${ENABLE_EMBEDDED_QUEUE}
        password="${XLR_TASK_QUEUE_PASSWORD}"
        queueName="${XLR_TASK_QUEUE_NAME}"
        url="${XLR_TASK_QUEUE_URL}"
        username="${XLR_TASK_QUEUE_USERNAME}"
    }

    metrics {
        enabled = ${XL_METRICS_ENABLED}
    }

    security {
        auth {
            providers {
                oidc {
                    {{- if .Values.oidc.external }}
                    clientId=${OIDC_CLIENT_ID}
                    clientSecret=${OIDC_CLIENT_SECRET}
                    {{- if .Values.oidc.clientAuthMethod }}
                    clientAuthMethod={{ .Values.oidc.clientAuthMethod | quote }}
                    {{- end }}
                    {{- if .Values.oidc.clientAuthJwt.enable }}
                    clientAuthJwt {
                        jwsAlg={{ default "" .Values.oidc.clientAuthJwt.jwsAlg | quote }}
                        tokenKeyId={{ default "" .Values.oidc.clientAuthJwt.tokenKeyId | quote }}
                        {{- if .Values.oidc.clientAuthJwt.keyStore.enable }}
                        keyStore {
                            path={{ default "" .Values.oidc.clientAuthJwt.keyStore.path | quote }}
                            password=${OIDC_CLIENT_AUTH_JWT_KEYSTORE_PASSWORD}
                            type={{ default "" .Values.oidc.clientAuthJwt.keyStore.type | quote }}
                        }
                        {{- end }}
                        {{- if .Values.oidc.clientAuthJwt.key.enable }}
                        key {
                            alias={{ default "" .Values.oidc.clientAuthJwt.key.alias | quote }}
                            password=${OIDC_CLIENT_AUTH_JWT_KEY_PASSWORD}
                        }
                        {{- end }}
                    }
                    {{- end }}
                    issuer={{ .Values.oidc.issuer | quote }}
                    keyRetrievalUri={{ default "" .Values.oidc.keyRetrievalUri | quote }}
                    accessTokenUri={{ default "" .Values.oidc.accessTokenUri | quote }}
                    userAuthorizationUri={{ default "" .Values.oidc.userAuthorizationUri | quote }}
                    logoutUri={{ default "" .Values.oidc.logoutUri | quote }}
                    redirectUri={{ .Values.oidc.redirectUri | quote }}
                    postLogoutRedirectUri={{ .Values.oidc.postLogoutRedirectUri | quote }}
                    userNameClaim={{ default "" .Values.oidc.userNameClaim | quote }}
                    fullNameClaim={{ default "" .Values.oidc.fullNameClaim | quote }}
                    emailClaim={{ default "" .Values.oidc.emailClaim | quote }}
                    {{- if .Values.oidc.externalIdClaim }}
                    externalIdClaim={{ .Values.oidc.externalIdClaim | quote }}
                    {{- end }}
                    rolesClaim={{ default "" .Values.oidc.rolesClaim | quote }}
                    {{- if .Values.oidc.scopes }}
                    scopes={{ .Values.oidc.scopes }}
                    {{- else }}
                    scopes=["openid"]
                    {{- end }}
                    {{- if .Values.oidc.idTokenJWSAlg }}
                    idTokenJWSAlg={{ .Values.oidc.idTokenJWSAlg | quote }}
                    {{- end }}
                    {{- if .Values.oidc.accessToken.enable }}
                    access-token {
                        issuer={{ default "" .Values.oidc.accessToken.issuer | quote }}
                        audience={{ default "" .Values.oidc.accessToken.audience | quote }}
                        keyRetrievalUri={{ default "" .Values.oidc.accessToken.keyRetrievalUri | quote }}
                        jwsAlg={{ default "" .Values.oidc.accessToken.jwsAlg | quote }}
                        secretKey=${OIDC_ACCESS_TOKEN_SECRET_KEY}
                        }
                    {{- end }}
                    {{- if .Values.oidc.proxyHost }}
                    proxyHost={{ .Values.oidc.proxyHost | quote }}
                    {{- end }}
                    {{- if .Values.oidc.proxyPort }}
                    proxyPort={{ .Values.oidc.proxyPort | quote }}
                    {{- end }}
                    {{- else }}
                    clientId="release"
                    clientSecret="ab2088f6-2251-4233-9b22-e24db6a67483"
                    {{- range .Values.keycloak.ingress.rules }}
                    issuer="http{{ if $.Values.keycloak.ingress.tls }}s{{ end }}://{{ .host }}/auth/realms/digitalai-platform"
                    keyRetrievalUri="http{{ if $.Values.keycloak.ingress.tls }}s{{ end }}://{{ .host }}/auth/realms/digitalai-platform/protocol/openid-connect/certs"
                    accessTokenUri="http{{ if $.Values.keycloak.ingress.tls }}s{{ end }}://{{ .host }}/auth/realms/digitalai-platform/protocol/openid-connect/token"
                    userAuthorizationUri="http{{ if $.Values.keycloak.ingress.tls }}s{{ end }}://{{ .host }}/auth/realms/digitalai-platform/protocol/openid-connect/auth"
                    logoutUri="http{{ if $.Values.keycloak.ingress.tls }}s{{ end }}://{{ .host }}/auth/realms/digitalai-platform/protocol/openid-connect/logout"
                    {{- end }}
                    {{- range .Values.ingress.hosts }}
                    redirectUri="http{{ if $.Values.ingress.tls }}s{{ end }}://{{ . }}/oidc-login"
                    postLogoutRedirectUri="http{{ if $.Values.ingress.tls }}s{{ end }}://{{ . }}/oidc-login"
                    {{- end }}
                    userNameClaim="preferred_username"
                    fullNameClaim="name"
                    emailClaim="email"
                    rolesClaim="groups"
                    scopes =["openid"]
                    {{- end }}
                }
            }
        }
    }
    }
{{- end }}
